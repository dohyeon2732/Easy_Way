package com.example.mobile_project_3.ui_screen

import SearchBarWithFilter
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.BottomSheetScaffold
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.rememberBottomSheetScaffoldState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Color.Companion.White
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mobile_project_3.data.FacilityApi.fetchEvalInfoByFacilityId
import com.example.mobile_project_3.data.FacilityCsvSearcher
import com.example.mobile_project_3.data.parseEvalXml
import com.example.mobile_project_3.viewmodel.FacilityData
import com.example.mobile_project_3.viewmodel.FacilityViewModel
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.launch
import androidx.compose.material3.Divider

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(navController: NavController, viewModel: FacilityViewModel, isDarkTheme: Boolean) {
    var isLoading by remember { mutableStateOf(false) }
    var selectedFacility by remember { mutableStateOf<FacilityData?>(null) }
    var selectedTab by remember { mutableStateOf("home") } // or use enum
    val sheetState = rememberBottomSheetScaffoldState()
    val scope = rememberCoroutineScope()
    val searchQuery by viewModel.searchQuery.collectAsState()
    var showTopOnly by remember { mutableStateOf(true) }

    val context = LocalContext.current

    LaunchedEffect(searchQuery) {

        if (viewModel.isDataLoaded && searchQuery == viewModel.lastLoadedQuery) {
            Log.d("HOME_SCREEN", "üö´ API Ïû¨Ìò∏Ï∂ú ÏÉùÎûµÎê®")
            return@LaunchedEffect
        }

        isLoading = true
        val rawList = FacilityCsvSearcher.searchFacilitiesByKeyword(context, searchQuery)
            .take(10) // ÏµúÎåÄ 20Í∞ú

        Log.d("FACILITY_LOG", "üîç Í≤ÄÏÉâ Í≤∞Í≥º (ÏµúÎåÄ 10Í∞ú): ${rawList.size}Í∞ú")

        val chunkedList = rawList.chunked(3) //10Í∞úÎ•º 3 3 4Î°ú ÎÇòÎàî
        val allFacilities = mutableListOf<FacilityData>()

        chunkedList.forEachIndexed { index, chunk ->
            val deferredList = chunk.map { item ->
                async {
                    try {
                        val xml = fetchEvalInfoByFacilityId("wfcltId", item.welfacilityId)
                        val eval = parseEvalXml(xml)
                        val evalList = eval.evalInfo.split(",").map { it.trim() }
                        //Ï†ïÎ≥¥ ÏãúÏÑ§Ïù¥ Í∞ÄÏßÑ Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏

                        FacilityData(
                            faclNm = item.name,
                            wlfctlId = item.welfacilityId,
                            address = item.address,
                            evalInfo = evalList,
                            latitude = item.latitude,
                            longitude = item.longitude,
                            type = item.type.substringAfter(" - ").trim()
                        )
                    } catch (e: Exception) {
                        Log.e("FACILITY_API", "üìÑ API Ïã§Ìå®: ${item.welfacilityId}", e)
                        FacilityData(
                            faclNm = item.name,
                            wlfctlId = item.welfacilityId,
                            address = item.address,
                            evalInfo = listOf("Ï†ïÎ≥¥ ÏóÜÏùå"),
                            latitude = item.latitude,
                            longitude = item.longitude,
                            type = item.type.substringAfter(" - ").trim()
                        )
                    }
                }
            }
            allFacilities += deferredList.awaitAll()
        }
        viewModel.setFacilities(allFacilities)
        viewModel.markDataLoaded(searchQuery) // ‚úÖ Î°úÎî© ÏôÑÎ£å Í∏∞Î°ù
        isLoading = false
    }

    val filteredList by viewModel.filteredFacilities.collectAsState() // ‚úÖ Ïä§ÏΩîÌîÑÎ•º Ï†ÑÏ≤¥Î°ú ÌôïÏû•

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(if (isDarkTheme) Color(0xFF3c3c3c) else Color.White)
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(if (isDarkTheme) Color(0xFF3c3c3c) else Color.White)
        ) {
            Box(
                modifier = Modifier.weight(1f)
                    .background(if (isDarkTheme) Color(0xFF3c3c3c) else Color.White)
            ) {
                BottomSheetScaffold(
                    scaffoldState = sheetState,
                    sheetPeekHeight = if (showTopOnly) 160.dp else 500.dp,
                    sheetShape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp),
                    containerColor = if (isDarkTheme) Color(0xFF3c3c3c) else Color.White,
                    sheetContent = {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .background(if (isDarkTheme) Color(0xFF3c3c3c) else Color.White)
                        ) {
                            Log.d("UI_DEBUG", "ÌôîÎ©¥Ïóê ÌëúÏãúÎê† ÏãúÏÑ§ Ïàò: ${filteredList.size}")
                            FacilityList(
                                facilities = filteredList,
                                showTopOnly = showTopOnly,
                                onUserScroll = {
                                    scope.launch {
                                        showTopOnly = false
                                        sheetState.bottomSheetState.expand()
                                    }
                                },
                                onCollapseRequest = {
                                    scope.launch {
                                        showTopOnly = true
                                        sheetState.bottomSheetState.partialExpand()
                                    }
                                },
                                onToggleFavorite = { viewModel.toggleFavorite(it) },
                                onItemClick = { facility ->
                                    scope.launch {
                                        try {
                                            showTopOnly = true
                                            sheetState.bottomSheetState.partialExpand()
                                            selectedFacility =
                                                viewModel.filteredFacilities.value.find { it.wlfctlId == facility.wlfctlId }
                                        } catch (e: Exception) {
                                            Log.e("FACILITY_ERROR", "ÏãúÏÑ§ ÏÑ†ÌÉù Ïã§Ìå®", e)
                                        }
                                    }
                                },
                                isDarkTheme = isDarkTheme
                            )
                        }
                    }
                ) { innerPadding ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(innerPadding)
                            .background(if (isDarkTheme) Color(0xFF3c3c3c) else Color.White)
                    ) {
                        SearchBarWithFilter(
                            onSearchClick = { query ->
                                viewModel.setSearchQuery(query)
                                showTopOnly = true
                                scope.launch {
                                    sheetState.bottomSheetState.partialExpand()
                                }
                            },
                            onFilterApply = { selectedFilterSet ->
                                viewModel.setSelectedFilters(selectedFilterSet)
                                println("Ï†ÅÏö©Îêú ÌïÑÌÑ∞: $selectedFilterSet")
                                Log.d("FilterList", "ÌïÑÌÑ∞Îêú ÌëúÏãúÎê† ÏãúÏÑ§ Ïàò: ${selectedFilterSet}")
                            },
                            viewModel = viewModel,
                            isDarkTheme = isDarkTheme
                        )
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .weight(1f)
                                .background(if (isDarkTheme) Color(0xFF3c3c3c) else Color.White),
                            contentAlignment = Alignment.Center
                        ) {
                            Log.d("facilites", "ÌôîÎ©¥Ïóê ÌëúÏãúÎê† ÏãúÏÑ§ Ïàò: ${filteredList}")
                            NaverMapScreen(facilities = filteredList, viewModel = viewModel)
                            selectedFacility?.let { facility ->
                                FacilityDetailOverlayCard(
                                    facility = facility,
                                    onDismiss = { selectedFacility = null }
                                )
                            }
                        }
                    }
                }
            }
        }

        if (isLoading) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color(0x88000000)),
                contentAlignment = Alignment.Center
            ) {
                androidx.compose.material3.CircularProgressIndicator()
            }
        }
    }
}